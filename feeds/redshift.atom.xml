<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>programming notes - Redshift</title><link href="https://szuckerman.github.io/" rel="alternate"></link><link href="https://szuckerman.github.io/feeds/redshift.atom.xml" rel="self"></link><id>https://szuckerman.github.io/</id><updated>2019-01-17T15:30:00-05:00</updated><entry><title>Integer Division in Redshift: Gotcha!</title><link href="https://szuckerman.github.io/integer_division_in_redshift.html" rel="alternate"></link><published>2019-01-17T15:30:00-05:00</published><updated>2019-01-17T15:30:00-05:00</updated><author><name>Sam Zuckerman</name></author><id>tag:szuckerman.github.io,2019-01-17:/integer_division_in_redshift.html</id><summary type="html">&lt;p&gt;Data types can always be tricky in SQL. Here's an interesting quirk I noticed with regard to integer division in Redshift.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What's the problem?&lt;/h1&gt;
&lt;h2&gt;Background to Integer Division&lt;/h2&gt;
&lt;p&gt;Usually when someone divides two numbers, which don't divide evenly, with a calculator or another software program, he expects there to be a decimal. &lt;/p&gt;
&lt;p&gt;For example, if I divide 3 by 2, I would expect to see 1.5.&lt;/p&gt;
&lt;p&gt;It's well known with some programming situations (like Python 2) that the answer to the above would be "1" since nothing after the decimal is preserved.&lt;/p&gt;
&lt;p&gt;The following Redshift code would also return 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;What's the solution to get a decimal then?&lt;/h2&gt;
&lt;p&gt;If you cast the values to a &lt;code&gt;float&lt;/code&gt;, then everything works nicely.&lt;/p&gt;
&lt;p&gt;For example, in Python 2 the following would both return 1.5:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;

&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;How to solve this in Redshift:&lt;/h1&gt;
&lt;p&gt;In Redshift, the answer is basically the same, you merely cast to a &lt;code&gt;float&lt;/code&gt;, or &lt;code&gt;decimal&lt;/code&gt;, but there's a big caveat.&lt;/p&gt;
&lt;p&gt;Let's say you try the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUMERATOR&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DENOMINATOR&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;DECIMAL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might still have integer division! Why? Because toward the bottom of &lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html"&gt;this AWS documentation on numeric computations in Redshift&lt;/a&gt; it mentions that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When one of the operands in a calculation has an INTEGER data type and the other operand is DECIMAL, the INTEGER operand is implicitly cast as a DECIMAL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INT2 (SMALLINT) is cast as DECIMAL(5,0)&lt;/li&gt;
&lt;li&gt;INT4 (INTEGER) is cast as DECIMAL(10,0)&lt;/li&gt;
&lt;li&gt;INT8 (BIGINT) is cast as DECIMAL(19,0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, instead of the above, you might want to cast as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUMERATOR&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DENOMINATOR&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, rather, something that keeps the precision in the number. The first number after the word &lt;code&gt;DECIMAL&lt;/code&gt; is the &lt;code&gt;precision&lt;/code&gt;, loosely meaning, "how many numbers total in the number (including after the decimal point)" and &lt;code&gt;scale&lt;/code&gt; is "how many numbers after the decimal point".&lt;/p&gt;
&lt;p&gt;The above have a &lt;code&gt;scale&lt;/code&gt; of 0, which essentially makes them look like an &lt;code&gt;INTEGER&lt;/code&gt;; just add &lt;code&gt;scale&lt;/code&gt; to the mix and you should be good to go!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I've seen inconsistent results with this truncation behavior, especially when I have queries containing aggregations upon aggregations. For example, even &lt;code&gt;SELECT NUMERATOR::DECIMAL/DENOMINATOR::DECIMAL&lt;/code&gt; returns as a &lt;code&gt;DECIMAL&lt;/code&gt;. The main point of this post is to be able to troubleshoot what the issue might be if you think you've casted data types properly and don't want to spend too much time pulling your hair out.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Redshift"></category><category term="redshift"></category><category term="sql"></category></entry><entry><title>Getting tripped up with "MEDIAN" in Redshift and PostgreSQL</title><link href="https://szuckerman.github.io/getting-tripped-up-with-median-in-redshift-and-postgresql.html" rel="alternate"></link><published>2018-12-14T15:30:00-05:00</published><updated>2018-12-14T15:30:00-05:00</updated><author><name>Sam Zuckerman</name></author><id>tag:szuckerman.github.io,2018-12-14:/getting-tripped-up-with-median-in-redshift-and-postgresql.html</id><summary type="html">&lt;p&gt;Analytical functions are essential to working effectively with relational databases. There's a quirk with MEDIAN, however.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;MEDIAN in Redshift&lt;/h1&gt;
&lt;p&gt;Redshift has an interesting quirk in that when a &lt;code&gt;MEDIAN&lt;/code&gt; function is called within a query, it implicitly give an &lt;code&gt;ORDER BY&lt;/code&gt; for that column. &lt;/p&gt;
&lt;h2&gt;Window Functions in 5 seconds&lt;/h2&gt;
&lt;p&gt;Taking a step back, when working with window functions there's usually  &lt;code&gt;OVER&lt;/code&gt; and  &lt;code&gt;ORDER BY&lt;/code&gt; arguments and optionally, but often, a &lt;code&gt;PARTITION BY&lt;/code&gt; argument as well.&lt;/p&gt;
&lt;p&gt;If I wanted to order customer purchases by customer, I could do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;PRODUCT_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ORDER_DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ROW_NUMBER&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OVER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PARTITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORDER_DATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ORDER_NUMBER&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ORDERS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;MEDIAN&lt;/code&gt; function also uses an &lt;code&gt;ORDER BY&lt;/code&gt; internally to determine the middle value, but doesn't use the same syntax as the above.&lt;/p&gt;
&lt;h2&gt;Ok, fine... But why does this matter?&lt;/h2&gt;
&lt;p&gt;The above is important to keep in mind since multiple &lt;code&gt;MEDIAN&lt;/code&gt; functions in a query will mess up. You'll get the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;within&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clauses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;aggregate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;must&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll get this error if you have any combination of &lt;code&gt;LISTAGG&lt;/code&gt;, &lt;code&gt;PERCENTILE_CONT&lt;/code&gt;, or &lt;code&gt;MEDIAN&lt;/code&gt; in a query that do not share the same &lt;code&gt;ORDER BY&lt;/code&gt; column.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/r_MEDIAN.html"&gt;AWS Redshift Documentation&lt;/a&gt; shows the following example that will execute correctly when mixing these various window functions in a query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salesid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pricepaid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;percentile_cont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;within&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salesid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;salesid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sales&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;salesid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pricepaid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Solutions if you need multiple MEDIANs&lt;/h2&gt;
&lt;p&gt;If you absolutely need to have various medians in a result set, most likely the easiest option is to make multiple subqueries and then join them together at the end.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MED_ITEMS_BOUGHT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MEDIAN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITEMS_BOUGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MED_ITEMS_BOUGHT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ORDERS&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="n"&gt;MED_PAYMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;MEDIAN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PAYMENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MED_PAYMENT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ORDERS&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MIB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MIB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MED_ITEMS_BOUGHT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MED_PAYMENT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MED_ITEMS_BOUGHT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MIB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MED_PAYMENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MP&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MIB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;MEDIAN in PostgreSQL&lt;/h1&gt;
&lt;p&gt;Unfortunately PostgreSQL doesn't have a native median function, but this doesn't really matter so much, as there is a &lt;code&gt;percentile_cont&lt;/code&gt; function. &lt;code&gt;percentile_cont(0.5)&lt;/code&gt; is equivalent to &lt;code&gt;median&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see the description of &lt;code&gt;percentile_cont&lt;/code&gt; in &lt;a href="https://www.postgresql.org/docs/9.6/functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE"&gt;the official PostgreSQL documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if you &lt;em&gt;must&lt;/em&gt; have a &lt;code&gt;median&lt;/code&gt; function (i.e you're using SQLAlchemy and want to seamlessly switch backends) there's a user-defined &lt;code&gt;PL/pgSQL&lt;/code&gt; function that can mimic this functionality.&lt;/p&gt;
&lt;p&gt;The code for &lt;code&gt;median&lt;/code&gt; is available &lt;a href="https://wiki.postgresql.org/wiki/Aggregate_Median"&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;When using &lt;code&gt;MEDIAN&lt;/code&gt; in Redshift, you cannot use more than one in a query at a time. A workaround is to make subqueries and join later. &lt;/p&gt;
&lt;p&gt;PostgreSQL does not have a native &lt;code&gt;MEDIAN&lt;/code&gt; function, but this may be mimicked with the &lt;code&gt;percentile_cont(0.5)&lt;/code&gt; function or &lt;a href="https://wiki.postgresql.org/wiki/Aggregate_Median"&gt;an additional PL/pgSQL function&lt;/a&gt;.&lt;/p&gt;</content><category term="Redshift"></category><category term="sql"></category><category term="redshift"></category><category term="postgres"></category></entry><entry><title>The easiest way to get data into Redshift</title><link href="https://szuckerman.github.io/get_data_into_redshift.html" rel="alternate"></link><published>2018-10-23T11:30:00-04:00</published><updated>2018-10-23T11:30:00-04:00</updated><author><name>Sam Zuckerman</name></author><id>tag:szuckerman.github.io,2018-10-23:/get_data_into_redshift.html</id><summary type="html">&lt;p&gt;There are many ways to load data into Redshift, this method, using the &lt;code&gt;COPY&lt;/code&gt; command, should be the most efficient and reliable.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using AWS and working in an analytical environment, you most likely have encountered Redshift at some point. Now, Redshift is awesome since it can contain a lot of data and query that data quickly. Due to its columnar storage, it's more effiecient to run a query such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_amount&lt;/span&gt;

&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customer_table&lt;/span&gt;

&lt;span class="k"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;since it only needs to look at those two columns, versus a system like Oracle that needs to read the entire row up to the necessary column, basically wasting time reading unnecessary data.&lt;/p&gt;
&lt;h1&gt;Problem: Getting the data to Redshift&lt;/h1&gt;
&lt;p&gt;However, this presents us with a bit of a problem. We like a lot of data being stored in Redshift, but how can we 'get' it there? If I'm performing a transform and load from another table, the answer is trivial, but let's say I have a lot of data sitting on my computer I want in Redshift.&lt;/p&gt;
&lt;p&gt;For example, I could have:
- Created a model in Python or R and want to add a table of the predictions to Redshift. This is especially true if you're manually tagging millions of customers. 
- Data not created from a standard format, such as disparate Excel files or even an Access DB (yes, I've had to do that...)&lt;/p&gt;
&lt;p&gt;If the data is in the "few Gbs" of size, it won't take very long to upload, but for data integrity it's not the best idea to be loading row by row across a network for a huge table, but for Redshift row-by-row inserts aren't the best idea anyway, since, as mentioned above with the columnar storage, the columns are optimized based on the data types and Redshift doesn't like these individual row inserts as much as other relational databases do.&lt;/p&gt;
&lt;p&gt;That's assuming you even have proper database credentials and connections. If you can't even connect directly, this is pretty much impossible.  &lt;/p&gt;
&lt;h1&gt;Solution: S3 to the rescue!&lt;/h1&gt;
&lt;p&gt;Since Redshift and S3 are both part of AWS, they have baked in functionality together.&lt;/p&gt;
&lt;p&gt;Here's the workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do your work in Python/R and save to a CSV or TXT file&lt;/li&gt;
&lt;li&gt;Upload that file to S3&lt;/li&gt;
&lt;li&gt;Create the table in Redshift (or truncate a previous one, depending on your use-case)&lt;/li&gt;
&lt;li&gt;Use the Redshift COPY command to move the file from S3 to Redshift&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at these in turn:&lt;/p&gt;
&lt;h2&gt;Saving a CSV file&lt;/h2&gt;
&lt;p&gt;First, you need to make sure that your data is in a friendly format to save to a Redshift table. That means: try to stay UTF-8 and also try to avoid any quoting characters if possible. One single quote without another to close the quote will give you a lot of headaches later. Similarly, make sure that you have all the columns that you need for this insert.&lt;/p&gt;
&lt;h2&gt;Uploading that file to S3&lt;/h2&gt;
&lt;h3&gt;Using boto3&lt;/h3&gt;
&lt;p&gt;There's various ways to upload a file to S3. The first, using &lt;a href="https://boto3.readthedocs.io/"&gt;AWS's Boto3 library&lt;/a&gt; goes a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The first example from the &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3.html"&gt;S3 section&lt;/a&gt; on boto3&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="c1"&gt;# Get the service client&lt;/span&gt;
&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Upload tmp.txt to bucket-name at key-name&lt;/span&gt;
&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmp.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bucket-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;key-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are also other upload methods depending on what you're doing; see the S3 section for more examples.&lt;/p&gt;
&lt;p&gt;This obviously assumes you already have a bucket to upload to. That's easy enough to do from the S3 UI console or the other methods in the boto3 library.&lt;/p&gt;
&lt;h3&gt;Using AWS CLI&lt;/h3&gt;
&lt;p&gt;I personally prefer to use the AWS CLI to upload to S3 since I like the separation between 'modeling work' in Python/R and I/O to S3.&lt;/p&gt;
&lt;p&gt;The S3 command works very much like the &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; commands in Unix systems, so it's easy to get get used to and also easy to use if you're used to moving files around your system anyway.&lt;/p&gt;
&lt;p&gt;You can see all the commands available at their &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/s3/index.html"&gt;S3 documentation for the CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is as easy as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws&lt;span class="w"&gt; &lt;/span&gt;s3&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;filename&lt;span class="w"&gt; &lt;/span&gt;s3://bucket-name/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can do &lt;code&gt;cp&lt;/code&gt; or &lt;code&gt;mv&lt;/code&gt; to get the file to S3, but I usually prefer &lt;code&gt;cp&lt;/code&gt; since I'll have a backup of the file in case something goes wrong with the flow to Redshift. I can then delete the file later after I'm done with the whole process.&lt;/p&gt;
&lt;h2&gt;Create the table in Redshift&lt;/h2&gt;
&lt;p&gt;I'm not going to go into the specifics on creating a table in this section, as table creation is an entirely different beast by itself, but there are two important ideas to keep in mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure that you have your sort keys set up properly when making the table, or else you'll need to &lt;code&gt;drop&lt;/code&gt; the table and start again. According to the &lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/r_ALTER_TABLE.html"&gt;AWS Redshift documentation&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can't add a column that is the distribution key (DISTKEY) or a sort key (SORTKEY) of the table.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The columns don't have to be in the same order as the CSV, but we'll discuss that more in the next section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Using the Redshift COPY command&lt;/h2&gt;
&lt;h3&gt;Access Rights&lt;/h3&gt;
&lt;p&gt;Before being able to move the file from S3 to Redshift, you need a role with the correct permissions. The role should (at least) have S3 read access and Redshift insert/write access. In the IAM console, you can create a new Redshift role and attach the &lt;code&gt;RedshiftAdminAccess&lt;/code&gt; policy and &lt;code&gt;S3&lt;/code&gt; policy. You use the ARN reference in the command. In this example, I'm using &lt;code&gt;'arn:aws:iam::&amp;lt;account_number&amp;gt;:role/&amp;lt;your_redshift_role&amp;gt;'&lt;/code&gt; as the ARN.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;p&gt;The basic syntax to move a file from S3 to Redshift is the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3://bucket-name/filename.txt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iam_role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arn:aws:iam::&amp;lt;account_number&amp;gt;:role/&amp;lt;your_redshift_role&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the columns in the file in S3 are in the exact order you need them for the table, you can just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3://bucket-name/filename.txt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iam_role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arn:aws:iam::&amp;lt;account_number&amp;gt;:role/&amp;lt;your_redshift_role&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But I think it's more clear when the columns are explicit. Also, you can change the order of the columns, or even skip some columns like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3://bucket-name/filename.txt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iam_role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arn:aws:iam::&amp;lt;account_number&amp;gt;:role/&amp;lt;your_redshift_role&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also like to have a &lt;code&gt;default&lt;/code&gt; value on the table of &lt;code&gt;DATE_CREATED TIMESTAMP DEFAULT SYSDATE&lt;/code&gt;, therefore if you're explicit with the column names when loading from Redshift, and don't include a column name of &lt;code&gt;DATE_CREATED&lt;/code&gt;, that column will automatically populate to the load date.&lt;/p&gt;
&lt;h3&gt;Other Useful COPY Commands&lt;/h3&gt;
&lt;p&gt;There's additional commands to add (full list &lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html"&gt;can be found here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I find that I use the following most often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html#copy-csv"&gt;CSV&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This takes care of the fact that the file is a CSV and has defaults for the format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html#copy-csv"&gt;QUOTE [AS] 'quote_character'&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This can only be used with the &lt;code&gt;CSV&lt;/code&gt; command and is useful if there's user input where there might be hanging apostrophes or something like that. If you change the quote character to something random it will ignore the single apostrophes. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html#copy-delimiter"&gt;DELIMITER&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;You can change &lt;code&gt;DELIMITER&lt;/code&gt; to &lt;code&gt;\t&lt;/code&gt; if you have a txt file. You don't need the &lt;code&gt;CSV&lt;/code&gt; command in this case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html#copy-ignoreheader"&gt;IGNOREHEADER&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;If your file has column headers you'll get an error when loading. Use &lt;code&gt;IGNOREHEADER 1&lt;/code&gt; to skip the first line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With some of these commands added, your &lt;code&gt;COPY&lt;/code&gt; command might look more like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s3://bucket-name/filename.txt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iam_role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arn:aws:iam::&amp;lt;account_number&amp;gt;:role/&amp;lt;your_redshift_role&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DELIMITER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QUOTE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IGNOREHEADER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There you have it! Your data is now safely, and securely, in Redshift to be able to be joined with other tables for efficient data processing.&lt;/p&gt;
&lt;p&gt;After this is all done, you might want to go back and delete the local file from your computer and the file from S3 (if it's not needed anymore).&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this post we looked at how to save data as a &lt;code&gt;CSV&lt;/code&gt; or &lt;code&gt;TXT&lt;/code&gt; file, upload to S3 and then use the &lt;code&gt;COPY&lt;/code&gt; command in Redshift to quickly and efficiently move said data to the Redshift cluster, streamlining an often painful process of moving large amounts of data through various systems. &lt;/p&gt;</content><category term="Redshift"></category><category term="python"></category><category term="s3"></category><category term="redshift"></category><category term="aws"></category><category term="data transfer"></category></entry></feed>